name: Pull Request
on: [pull_request]

jobs:
  test:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
          token: ${{ secrets.SUBMODULE_PAT }}
      - name: Install 
        run: choco install OpenSSL.Light -y
      - name: Decrypt
        run: |
          git lfs install
          cd .\Libraries
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\Medtronic.NeuroStim.Olympus.dll.enc -out .\Medtronic.NeuroStim.Olympus.dll
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\Medtronic.SummitAPI.dll.enc -out .\Medtronic.SummitAPI.dll
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\Medtronic.TelemetryM.dll.enc -out .\Medtronic.TelemetryM.dll
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\NLog.dll.enc -out .\NLog.dll
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\wclBluetoothFramework.dll.enc -out .\wclBluetoothFramework.dll
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\wclCommon.dll.enc -out .\wclCommon.dll
          openssl enc -iter 5 -aes-256-cbc -k ${{ secrets.LIBRARY_KEY }} -d -in .\wclCommunication.dll.enc -out .\wclCommunication.dll
      - name: Clean
        run: dotnet clean
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test -v n
      - name: Cleanup
        run: Remove-Item .\Libraries\*.dll
